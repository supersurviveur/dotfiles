use-grammars = { only = [ "rust", "c", "ocaml", "toml", "markdown", "javascript", "jsx", "typescript", "tsx", "css", "scss", "html", "typst", "bash", "sway", "sql", "json", "make" ] }

[language-server]
emmet-ls = { command = "emmet-ls", args = [ "--stdio" ]}

[language-server.eslint]
command = "vscode-eslint-language-server"
args = ["--stdio"]

[language-server.eslint.config]
codeActionsOnSave = { mode = "all", "source.fixAll.eslint" = true }
format = { enable = true }
nodePath = ""
quiet = false
rulesCustomizations = []
run = "onType"
validate = "on"
experimental = {}
problems = { shortenToSingleLine = false }

[language-server.eslint.config.codeAction]
disableRuleComment = { enable = true, location = "separateLine" }
showDocumentation = { enable = true }

[language-server.eslint.config.workingDirectory]
mode = "location"

[language-server.vscode-json-language-server.config]
json = { validate = { enable = true }, format = { enable = true } }
provideFormatter = true

[language-server.vscode-css-language-server.config]
css = { validate = { enable = true } }
scss = { validate = { enable = true } }
less = { validate = { enable = true } }
provideFormatter = true

[language-server.cssmodules]
command = "cssmodules-language-server"
args = []

[language-server.rust-analyzer]
config = { cargo = { features = "all" } }

[language-server.gpt]
command = "helix-gpt"
args = ["--handler", "copilot", "--copilotApiKey", "COPILOT_KEY"]

[language-server.basedpyright]
except-features = ["format", "code-action"]

[language-server.basedpyright.config.basedpyright.analysis]
typeCheckingMode = "standard"

[language-server.ruff]
command = "ruff"
args = ["server"]

[language-server.ruff.config.settings.lint]
preview = true
select = [
  # pycodestyle
  "E",
  # Pyflakes
  "F",
  # pyupgrade
  "UP",
  # flake8-bugbear
  "B",
  # flake8-simplify
  "SIM",
  # isort
  "I",
]

[[language]]
name = "python"
language-servers = [ "basedpyright", "ruff" ]

[[language]]
name = "typescript"
indent = { tab-width = 4, unit = "    " }
language-servers = [ "typescript-language-server", "eslint", "emmet-ls" ]

[[language]]
name = "tsx"
indent = { tab-width = 4, unit = "    " }
language-servers = [ "typescript-language-server", "eslint", "cssmodules", "emmet-ls" ]
auto-format = false

[[language]]
name = "rust"
indent = { tab-width = 4, unit = "    " }
formatter = { command = "rustfmt" }
auto-format = false

[[language]]
name = "c"
indent = { tab-width = 4, unit = "    " }
formatter = { command = "clang-format", args=['-style={BasedOnStyle: llvm, IndentWidth: 4}'] }

[[language]]
name = "scss"
indent = { tab-width = 4, unit = "    " }
language-servers = [ "vscode-css-language-server", "cssmodules" ]
auto-format = false

[[grammar]]
name = "scss"
source = { git = "https://github.com/tree-sitter-grammars/tree-sitter-scss", rev = "8f47fa8be72ac299cab4c6aa02668635f2dcd4be" }

[[language]]
name = "toml"
language-servers = [
  "gpt",
]

[[language]]
name = "ocaml"
indent = { tab-width = 2, unit = "    " }
formatter = { command = "ocamlformat", args=["-", "--impl", "--enable-outside-detected-project", "--profile=janestreet", "--if-then-else=k-r"] }
# formatter = { command = "ocamlformat", args=["-", "--impl", "--enable-outside-detected-project", "--profile=janestreet", "--max-indent=4", "--let-binding-indent=4",
# "--cases-exp-indent=4", "--extension-indent=4", "--function-indent=4", "--type-decl-indent=4", "--stritem-extension-indent=4", "--if-then-else=k-r"] }


[[language]]
name = "markdown"
formatter = { command = "dprint", args = ["fmt", "--stdin", "md"]}

[[language]]
name = "json"
indent = { tab-width = 4, unit = "    " }
auto-format = false

[[language]]
name = "typst"
indent = { tab-width = 4, unit = "    " }
formatter = { command = "typstyle" }
